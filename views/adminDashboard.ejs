<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer"/>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="shortcut icon" href="images/logo.ico" type="image/x-icon" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="css/dashboard.css" />
  </head>
  <body>
    <div class="header">
      <div class="logo">
        <img src="./images/logo.png" alt="" />
      </div>
    </div>
    <div class="content">
        <div class="side-panel">
            <a href="/admin-dashboard">Dashboard</a>
    
            <div class="dropdown">
                <p class="dropdown-toggle">Workout</p>
                <div class="dropdown-content">
                    <a href="/workout-user">User Workout</a>
                    <a href="/add-workout">Workouts</a>
                </div>
            </div>
    
            <a href="/admin-usertbl">Users</a>
            <a href="/admin-sales">Sales</a>
            <a href="/admin-review">Reviews</a>
    
            <div class="logoutbtn">
                <a href="/"><i class="fas fa-sign-out-alt"></i></a>
            </div>
      </div>

      <div class="main-col">
        <h1>Welcome, Admin</h1>
        <div class="first-col">
          <div class="summary">
            <div class="card">
              <h1>Total Users</h1>
              <p><%= userCount %></p>
              <!-- Dynamic User Count -->
            </div>
            <div class="card">
              <h1>Total Workouts</h1>
              <p><%= workoutCount %></p>
              <!-- Dynamic Workout Count -->
            </div>
            <div class="card">
              <h1>Workout Log</h1>
              <canvas id="workout-log-graph" width="385"></canvas>
              <script>
                (async () => {
                  const response = await fetch('/user-logs-count');
                  const userLogsCount = await response.json();
                  const ctx = document.getElementById('workout-log-graph').getContext('2d');
                  new Chart(ctx, {
                    type: 'bar',
                    data: {
                      labels: ['Daily', 'Weekly', 'Monthly'],
                      datasets: [{
                        label: 'Workout Logs',
                        data: [userLogsCount.daily, userLogsCount.weekly, userLogsCount.monthly],
                        backgroundColor: [
                          'rgba(255, 99, 132, 0.2)',
                          'rgba(54, 162, 235, 0.2)',
                          'rgba(255, 206, 86, 0.2)'
                        ],
                        borderColor: [
                          'rgba(255, 99, 132, 1)',
                          'rgba(54, 162, 235, 1)',
                          'rgba(255, 206, 86, 1)'
                        ],
                        borderWidth: 1
                      }]
                    },
                    options: {
                      scales: {
                        y: {
                          beginAtZero: true
                        }
                      }
                    }
                  });
                })();
              </script>
            </div>
            <div class="card">
              <h1>Total Login</h1>
              <canvas id="user-login-graph" width="300" height="200"></canvas>
              <script>
                (async () => {
                  const response = await fetch('/user-logs');
                  const userLogs = await response.json();
                  const ctx = document.getElementById('user-login-graph').getContext('2d');
                  new Chart(ctx, {
                    type: 'line',
                    data: {
                      labels: ['Daily', 'Weekly', 'Monthly'],
                      datasets: [{
                        label: 'User Logs',
                        data: [userLogs.daily, userLogs.weekly, userLogs.monthly],
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        fill: false
                      }]
                    },
                    options: {
                      scales: {
                        y: {
                          beginAtZero: true
                        }
                      }
                    }
                  });
                })();
              </script>
            </div>
            </div>
        </div>
        <div class="favorite-workouts">
          <div class="favorite-workouts"></div>
        </div>
        <script>
          // Function to fetch and display the most popular workouts
          async function loadMostPopularWorkout() {
            try {
              const response = await fetch('/most-popular-workouts'); // Fetch data from the backend
              if (!response.ok) throw new Error('Failed to fetch popular workout');

              const workouts = await response.json(); // Parse the JSON data
              const container = document.querySelector('.favorite-workouts'); // Select the container

              // If there are workouts, display the top one (most logged)
              if (workouts.length > 0) {
                const topWorkout = workouts[0]; // Get the most popular workout

                // Update the HTML with the top workout's details
                container.innerHTML = `
                <div class="most-favorite-workout">
                  <h1>Most Popular Workout</h1>
                  <div class="workout-details">
                    <h3>${topWorkout._id}</h3>
                    <p>Logged ${topWorkout.count} times</p>
                  </div>
                </div>
                `;
              } else {
                // Display a message if no workouts are available
                container.innerHTML = `<p>No workouts logged yet.</p>`;
              }
            } catch (error) {
              console.error('Error loading popular workout:', error);
            }
          }

          // Load the popular workouts when the page loads
          document.addEventListener('DOMContentLoaded', loadMostPopularWorkout);
        </script>
        <div class="second-col">
          <div class="recentAct">
            <h1>Recent Activities</h1>
            <ul id="activity-list"></ul>
          </div>
        </div>
        <div class="review-sec">
          <h1>Reviews</h1>
          <div class="review-sec-col">
            <p>No reviews...</p>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Function to fetch and display activities
      async function fetchActivities() {
        try {
          const response = await fetch("/activities");
          const activities = await response.json();

          const activityList = document.getElementById("activity-list");
          activityList.innerHTML = "";

          const now = new Date(); // Current time

          // Split activities into recent (â‰¤ 30 mins) and older (> 30 mins)
          const recentActivities = activities.filter((activity) => {
            const activityTime = new Date(activity.createdAt);
            const diffInMinutes = (now - activityTime) / (1000 * 60); // Convert ms to minutes
            return diffInMinutes <= 30;
          });

          const olderActivities = activities.filter((activity) => {
            const activityTime = new Date(activity.createdAt);
            const diffInMinutes = (now - activityTime) / (1000 * 60); // Convert ms to minutes
            return diffInMinutes > 30;
          });

          // Render recent activities
          if (recentActivities.length > 0) {
            const recentHeader = document.createElement("h3");
            recentHeader.textContent = "Recent Activities";
            activityList.appendChild(recentHeader);

            recentActivities.forEach((activity) => {
              const listItem = document.createElement("li");
              listItem.textContent = `${activity.activity}`;
              activityList.appendChild(listItem);
            });
          }

          // Add a horizontal line if there are both recent and older activities
          if (recentActivities.length > 0 && olderActivities.length > 0) {
            const line = document.createElement("hr");
            activityList.appendChild(line);
          }

          // Render older activities
          if (olderActivities.length > 0) {
            const olderHeader = document.createElement("h3");
            olderHeader.textContent = "Activities";
            activityList.appendChild(olderHeader);

            olderActivities.forEach((activity) => {
              const listItem = document.createElement("li");
              listItem.textContent = `${activity.activity}`;
              activityList.appendChild(listItem);
            });
          }
        } catch (error) {
          console.error("Error fetching activities:", error);
        }
      }

      // Function to refresh activities every 30 seconds
      function startFetchingActivities() {
        fetchActivities(); // Initial fetch
        setInterval(fetchActivities, 30000); // Refresh every 30 seconds
      }

      // Start fetching activities when the page loads
      window.onload = startFetchingActivities;
    </script>
  </body>
</html>
